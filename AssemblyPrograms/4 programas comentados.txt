------------------------------------------------------------------------------
------------------ P1: 10 números da sequência de fibonacci ------------------
------------------------------------------------------------------------------
0	LDI r1,0         carrega 0 em r1
1	STD [50],r1      guarda o valor de r1 na posição 50
2	LDI r1,1         carrega 1 em r1
3	STD [51],r1      guarda o valor de r1 na posição 51
4	LDI r1,50        posiçãp da memoria que vai sendo incrementada
5	LDI r2,51	 posiçãp da memoria que vai sendo incrementada
6	LDI r3,10        carrega 10 pq tu quer os 10 primeiros numeros de fibonacci
7	LDI r4,8	 numero da linha para recomeçar o loop

8	LDX r5,[r1]	 carrega oq tem na posição de memoria do r1 o r5
9	LDX r6,[r2]	 
10	ADD r5,r6
11	ADDI r2,1	 incrementa a posição de memoria
12	STX [r2],r5	 guarda no posição 52 o resultado de r5
13	ADDI r1,1	 incrementa o r1 pq tem que anda junto com o r2	
14	SUBI r3,1	 
15	JMPIG r4,r3     se 8 > 0, entao pc vai pra linha 8
16	STOP

------------------------------------------------------------------------------
-------- P2: faz a sequência de fibonacci de um valor ou -1 se < zero --------
------------------------------------------------------------------------------
LDI r1,10
LDI r2,19
JMPIL r2,r1
		conferiu se nao é menor que 0
LDI r3,0
STD [50],r3
LDI r3,1
STD [51],r3
LDI r7,10
		salvou na memoria os dois primeiros valores e a linha de parada
SUBI r1,2
JMPIE r7,r1
    		diminui 2 da sequencia e conferiu se não era apenas 2 o pedido
LDI r3,50
LDI r4,51
		carregou os indices
LDX r5,[r3]
LDX r6,[r4]
ADD r5,r6
ADDI r4,1
STX [r4],r5
ADDI r3,1
SUBI r1,1
JMPIG r7,r1
STOP

LDI r3,-1
STD [50],r3
STOP

------------------------------------------------------------------------------
--------------- P3 faz o fatorial de um valor ou -1 se < zero ----------------
------------------------------------------------------------------------------
LDI r1,5	carrega 5 em r1
LDI r2,13
LDI r4,7
LDI r5,11
JMPIL r2,r1	se r1 < 0, pula pra r2, senao pc++
STD [51],r1	guarda o valor de r1 na pos mem 51
LDD r3,[51]	carrega o valor da pos mem 51 em r3
SUBI r3,1
JMPIE r5,r3	se r3 = 0 pula pra linha 11
MULT r1,r3
JMPIG r4,r3	se r3 > 0 volta pra linha 7
STD 52,r1
STOP
LDI r5,-1	condição se o numero for negativo
STD [52],r5
STOP
	
------------------------------------------------------------------------------
-------------------- P4: ordena um vetor com bubble sort ---------------------
------------------------------------------------------------------------------
LDI r0,3
STD [50],r0
LDI r0,2
STD [51],r0
LDI r0,5
STD [52],r0
LDI r0,1
STD [53],r0
LDI r0,4
STD [54],r0

LDI r3,4  loop de dentro. já que tem 5 numeros no vetor, vao ser 4 comparações
LDI r4,4  qtd de vezes que vai ter que fazer o bubble sort pq tem 5 numeros pra ordenar
LDI r5,16 linha pra comparar os proximos indices, onde ta ldx r1,[r0]
LDI r6,29 linha pra recomeçar as comparações de novo, tem que pegar o indice 50 de novo
LDI r7,34 linha que termina a porra toda

LDI r0,50

JMPIE r6,r3
SUBI r3,1
LDX r1,[r0]
ADDI r0,1
LDX r2,[r0]
SUB r2,r1
JMPIG r5,r2
LDX r2,[r0]
STX [r0],r1
SUBI r0,1
STX [r0],r2
ADDI r0,1
JMPI r5,r0 // JUMPI r5

JMPIE r7,r4
SUBI r4,1
LDI r0,50
LDI r3,4
JMPIG r5,r0

STOP